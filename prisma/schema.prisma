// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  firstName         String
  lastName          String
  passwordHash      String
  kycStatus         KycStatus @default(PENDING)
  twoFaEnabled      Boolean  @default(false)
  twoFaSecret       String?
  emailVerified     Boolean  @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLogin         DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  accounts          BrokerAccount[]
  subscriptions     Subscription[]
  trades            Trade[]
  sessions          UserSession[]
  auditLogs         AuditLog[]
  notifications     Notification[]
  performanceMetrics PerformanceMetric[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastUsed     DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model BrokerAccount {
  id            String      @id @default(uuid())
  userId        String
  broker        Broker
  accountType   AccountType
  name          String
  apiKey        String      // Encrypted
  apiSecret     String      // Encrypted
  passphrase    String?     // For OKX and other brokers that need it
  isActive      Boolean     @default(true)
  balance       Decimal     @default(0)
  pnl           Decimal     @default(0)
  lastSync      DateTime    @default(now())
  winRate       Decimal     @default(0)  // Percentage of winning trades
  totalTrades   Int         @default(0)  // Total number of trades
  followers     Int         @default(0)  // Number of followers (for master accounts)
  riskLevel     RiskLevel   @default(MEDIUM) // Risk level for master accounts
  monthlyReturn Decimal     @default(0)  // Monthly return percentage
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  masterSubscriptions Subscription[] @relation("MasterAccount")
  followerSubscriptions Subscription[] @relation("FollowerAccount")
  trades              Trade[]
  positions           Position[]
  marketData          MarketData[]

  @@map("broker_accounts")
}

model Subscription {
  id               String  @id @default(uuid())
  userId           String
  masterAccountId  String
  followerAccountId String
  multiplier       Decimal
  maxPositionSize  Decimal
  dailyLossLimit   Decimal
  isActive         Boolean @default(true)
  pnl              Decimal @default(0)
  totalTrades      Int     @default(0)
  winRate          Decimal @default(0)
  monthlyReturn    Decimal @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  masterAccount   BrokerAccount @relation("MasterAccount", fields: [masterAccountId], references: [id], onDelete: Cascade)
  followerAccount BrokerAccount @relation("FollowerAccount", fields: [followerAccountId], references: [id], onDelete: Cascade)
  trades          Trade[]

  @@unique([masterAccountId, followerAccountId])
  @@map("subscriptions")
}

model Trade {
  id             String      @id @default(uuid())
  userId         String
  accountId      String
  subscriptionId String?
  symbol         String
  side           TradeSide
  quantity       Decimal
  price          Decimal
  executedPrice  Decimal?
  pnl            Decimal     @default(0)
  status         TradeStatus @default(PENDING)
  brokerTradeId  String?
  isCopyTrade    Boolean     @default(false)
  masterTradeId  String?
  executionTime  Int?        // Execution time in milliseconds
  slippage       Decimal?    // Slippage percentage
  fees           Decimal?    // Trading fees
  executedAt     DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  account      BrokerAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("trades")
}

model Position {
  id            String    @id @default(uuid())
  accountId     String
  symbol        String
  side          TradeSide
  quantity      Decimal
  entryPrice    Decimal
  currentPrice  Decimal   @default(0)
  pnl           Decimal   @default(0)
  percentage    Decimal   @default(0)  // P&L percentage
  isOpen        Boolean   @default(true)
  openedAt      DateTime  @default(now())
  closedAt      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  account BrokerAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, symbol])
  @@map("positions")
}

model MarketData {
  id            String   @id @default(uuid())
  accountId     String
  symbol        String
  price         Decimal
  bid           Decimal?
  ask           Decimal?
  volume        Decimal?
  change24h     Decimal?
  volume24h     Decimal?
  spread        Decimal?  // Bid-ask spread
  timestamp     DateTime @default(now())

  // Relations
  account BrokerAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, symbol, timestamp])
  @@map("market_data")
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  priority    NotificationPriority @default(NORMAL)
  metadata    Json?            // Additional data for the notification
  createdAt   DateTime         @default(now())
  readAt      DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PerformanceMetric {
  id              String   @id @default(uuid())
  userId          String
  accountId       String?
  date            DateTime
  totalPnL        Decimal  @default(0)
  winRate         Decimal  @default(0)
  totalTrades     Int      @default(0)
  avgTradeSize    Decimal  @default(0)
  maxDrawdown     Decimal  @default(0)
  sharpeRatio     Decimal  @default(0)
  monthlyReturn   Decimal  @default(0)
  bestTrade       Decimal  @default(0)
  worstTrade      Decimal  @default(0)
  createdAt       DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountId, date])
  @@map("performance_metrics")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model SystemHealth {
  id          String   @id @default(uuid())
  service     String
  status      HealthStatus
  message     String?
  responseTime Int?
  checkedAt   DateTime @default(now())

  @@map("system_health")
}

model MasterTrader {
  id            String   @id @default(uuid())
  name          String
  broker        Broker
  winRate       Decimal  @default(0)
  monthlyReturn Decimal  @default(0)
  followers     Int      @default(0)
  riskLevel     RiskLevel @default(MEDIUM)
  pnl           Decimal  @default(0)
  totalTrades   Int      @default(0)
  isActive      Boolean  @default(true)
  description   String?
  tags          String[] // Array of tags for categorization
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("master_traders")
}

// Enums
enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum Broker {
  DELTA
  BINANCE
  BYBIT
  OKX
}

enum AccountType {
  MASTER
  FOLLOWER
}

enum TradeSide {
  BUY
  SELL
}

enum TradeStatus {
  PENDING
  EXECUTED
  FAILED
  CANCELLED
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum NotificationType {
  TRADE_EXECUTED
  ACCOUNT_SYNC
  SUBSCRIPTION_UPDATE
  SYSTEM_ALERT
  PERFORMANCE_UPDATE
  SECURITY_ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}